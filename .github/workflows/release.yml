# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Release

on:
  push:
    branches: [ "master", "FD-238-open-source-3" ]

jobs:
  build:

    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    - run: |
        python -m pip install --upgrade pip build setuptools wheel

    - name: Generate unique version
      id: set_version
      run: |
        version=$(date +%Y.%m.%d.%H%M%S)+$(git rev-parse --short HEAD)
        echo "version=${version}" >> $GITHUB_ENV
        echo "version=${version}" >> "$GITHUB_OUTPUT"
  
    - name: Increment version
      run: |
        sed -i "s/version = \"[^\"]*\"/version = \"${{ env.version }}\"/" pyproject.toml
  
    - name: Build
      run: |
        python -m build . --no-isolation

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheel
        path: dist/*.whl

  test:
    
    runs-on: ubuntu-24.04
    needs: build
    steps:

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
        
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: python-wheel
        path: dist

    - name: Get latest release info
      run: |
        echo "asset_url=$asset_url" >> $GITHUB_ENV
        echo $asset_url
    
    - name: Install wheel
      run: |
        pip install --upgrade pip
        pip install --extra-index-url=$TWINE_REPOSITORY_URL `ls dist/*.whl`[pro,personal,training,test]

        # latest_release=$(curl -s https://api.github.com/repos/patrickkidd/vedana/releases/latest)
        # vedana_asset_url=$(echo "$latest_release" | jq -r '.assets[0].browser_download_url')
        # pip install $vedana_asset_url

        # latest_release=$(curl -s https://api.github.com/repos/patrickkidd/btcopilot/releases/latest)
        # btcopilot_asset_url=$(echo "$latest_release" | jq -r '.assets[0].browser_download_url')
        # pip install --upgrade pip pytest mock snapshottest
        # pip install $btcopilot_asset_url

        python -c "import btcopilot.tests; print(btcopilot.tests)"

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
  
    - name: Test with pytest
      run: |
        pytest -svv --disable-warnings --pyargs btcopilot.tests

  release:
    runs-on: ubuntu-24.04
    env:
      TWINE_REPOSITORY_URL: "${{ secrets.TWINE_REPOSITORY_URL }}"
      TWINE_USERNAME: "${{ secrets.TWINE_USERNAME }}"
      TWINE_PASSWORD: "${{ secrets.TWINE_PASSWORD }}"
    needs: [build, test]
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: python-wheel
        path: dist

    - run: |
        ls -la ./dist
        mv dist/*.whl .
        echo "WHEEL_FILENAME=`ls *.whl`" >> $GITHUB_ENV    

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.build.outputs.version}}
        release_name: ${{needs.build.outputs.version}}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WHEEL_FILENAME }}
        asset_name: ${{ env.WHEEL_FILENAME }}
        asset_content_type: application/zip

    - name: Push to pypi repo
      run: |
        pip install -U twine packaging
        twine upload --verbose --repository-url $TWINE_REPOSITORY_URL --username $TWINE_USERNAME --password $TWINE_PASSWORD *.whl
  